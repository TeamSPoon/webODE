
//----------------------------------------------------
// The following code was generated by CUP v0.10j
// Mon Jan 26 11:19:14 CET 2004
//----------------------------------------------------

package es.upm.fi.dia.ontology.webode.Axiom;

import java_cup.runtime.*;
import java.io.*;
import java.util.Hashtable;
import java.util.Vector;
import es.upm.fi.dia.ontology.webode.service.*;

/** CUP v0.10j generated parser.
  * @version Mon Jan 26 11:19:14 CET 2004
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\075\000\002\002\004\000\002\003\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\006" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\007\000\002\005\007\000\002" +
    "\005\007\000\002\005\007\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\003\000\002\004\004" +
    "\000\002\006\004\000\002\006\002\000\002\006\003\000" +
    "\002\007\006\000\002\007\004\000\002\007\006\000\002" +
    "\007\006\000\002\007\006\000\002\007\006\000\002\007" +
    "\006\000\002\007\006\000\002\007\006\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\010\003\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\004\000\002\010\004\000\002\010\005" +
    "\000\002\010\005\000\002\010\003\000\002\013\007\000" +
    "\002\013\007\000\002\013\007\000\002\013\007\000\002" +
    "\013\006\000\002\013\006\000\002\013\007\000\002\013" +
    "\007\000\002\011\005\000\002\011\006\000\002\011\003" +
    "\000\002\012\004\000\002\012\005\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\224\000\036\003\023\004\014\005\015\006\013\007" +
    "\004\010\017\011\022\012\006\013\024\016\010\021\007" +
    "\024\025\036\012\037\026\001\002\000\004\016\224\001" +
    "\002\000\020\002\uffd3\003\uffd3\015\uffd3\017\uffd3\020\uffd3" +
    "\022\uffd3\023\uffd3\001\002\000\006\003\101\016\103\001" +
    "\002\000\036\003\023\004\014\005\015\006\013\007\004" +
    "\010\017\011\022\012\006\013\024\016\010\021\007\024" +
    "\025\036\012\037\026\001\002\000\036\003\023\004\014" +
    "\005\015\006\013\007\004\010\017\011\022\012\163\013" +
    "\170\016\010\021\164\024\171\036\053\037\054\001\002" +
    "\000\020\002\uffdc\003\uffdc\015\uffdc\017\uffdc\020\uffdc\022" +
    "\uffdc\023\uffdc\001\002\000\044\002\ufffe\003\ufffe\014\ufffe" +
    "\015\ufffe\017\ufffe\020\ufffe\022\ufffe\023\ufffe\025\ufffe\026" +
    "\ufffe\027\ufffe\030\ufffe\031\ufffe\032\ufffe\033\ufffe\034\ufffe" +
    "\035\ufffe\001\002\000\004\016\160\001\002\000\004\016" +
    "\155\001\002\000\004\016\152\001\002\000\004\002\151" +
    "\001\002\000\004\016\146\001\002\000\024\025\140\026" +
    "\134\027\136\030\135\031\137\032\042\033\037\034\036" +
    "\035\043\001\002\000\016\002\000\003\116\017\121\020" +
    "\115\022\117\023\120\001\002\000\004\016\131\001\002" +
    "\000\026\016\126\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031" +
    "\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\001\002\000\006" +
    "\003\101\016\103\001\002\000\030\003\027\016\030\025" +
    "\uffff\026\uffff\027\uffff\030\uffff\031\uffff\032\uffff\033\uffff" +
    "\034\uffff\035\uffff\001\002\000\044\002\ufffd\003\ufffd\014" +
    "\ufffd\015\ufffd\017\ufffd\020\ufffd\022\ufffd\023\ufffd\025\ufffd" +
    "\026\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd\033\ufffd\034" +
    "\ufffd\035\ufffd\001\002\000\020\002\uffea\003\uffea\015\uffea" +
    "\017\uffea\020\uffea\022\uffea\023\uffea\001\002\000\014\003" +
    "\031\016\034\024\033\036\012\037\026\001\002\000\044" +
    "\002\ufff0\003\ufff0\014\ufff0\015\ufff0\017\ufff0\020\ufff0\022" +
    "\ufff0\023\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0" +
    "\032\ufff0\033\ufff0\034\ufff0\035\ufff0\001\002\000\004\015" +
    "\100\001\002\000\046\002\uffff\003\uffff\014\uffff\015\uffff" +
    "\016\075\017\uffff\020\uffff\022\uffff\023\uffff\025\uffff\026" +
    "\uffff\027\uffff\030\uffff\031\uffff\032\uffff\033\uffff\034\uffff" +
    "\035\uffff\001\002\000\014\003\031\016\034\024\052\036" +
    "\053\037\054\001\002\000\020\003\041\014\040\015\uffed" +
    "\032\042\033\037\034\036\035\043\001\002\000\014\003" +
    "\031\016\034\024\033\036\012\037\026\001\002\000\014" +
    "\003\031\016\034\024\033\036\012\037\026\001\002\000" +
    "\014\003\031\016\034\024\033\036\012\037\026\001\002" +
    "\000\004\015\uffec\001\002\000\014\003\031\016\034\024" +
    "\033\036\012\037\026\001\002\000\014\003\031\016\034" +
    "\024\033\036\012\037\026\001\002\000\004\015\uffef\001" +
    "\002\000\044\002\ufff8\003\ufff8\014\ufff8\015\ufff8\017\ufff8" +
    "\020\ufff8\022\ufff8\023\ufff8\025\ufff8\026\ufff8\027\ufff8\030" +
    "\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8\001\002" +
    "\000\044\002\ufffb\003\ufffb\014\ufffb\015\ufffb\017\ufffb\020" +
    "\ufffb\022\ufffb\023\ufffb\025\ufffb\026\ufffb\027\ufffb\030\ufffb" +
    "\031\ufffb\032\ufffb\033\ufffb\034\036\035\043\001\002\000" +
    "\004\015\uffee\001\002\000\044\002\ufffa\003\ufffa\014\ufffa" +
    "\015\ufffa\017\ufffa\020\ufffa\022\ufffa\023\ufffa\025\ufffa\026" +
    "\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa\033\ufffa\034\036" +
    "\035\043\001\002\000\044\002\ufff9\003\ufff9\014\ufff9\015" +
    "\ufff9\017\ufff9\020\ufff9\022\ufff9\023\ufff9\025\ufff9\026\ufff9" +
    "\027\ufff9\030\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\035" +
    "\ufff9\001\002\000\016\015\074\016\075\032\uffff\033\uffff" +
    "\034\uffff\035\uffff\001\002\000\026\015\073\025\ufffe\026" +
    "\ufffe\027\ufffe\030\ufffe\031\ufffe\032\ufffe\033\ufffe\034\ufffe" +
    "\035\ufffe\001\002\000\026\015\072\025\ufffd\026\ufffd\027" +
    "\ufffd\030\ufffd\031\ufffd\032\ufffd\033\ufffd\034\ufffd\035\ufffd" +
    "\001\002\000\012\032\060\033\057\034\056\035\061\001" +
    "\002\000\014\003\031\016\034\024\033\036\012\037\026" +
    "\001\002\000\014\003\031\016\034\024\033\036\012\037" +
    "\026\001\002\000\014\003\031\016\034\024\033\036\012" +
    "\037\026\001\002\000\014\003\031\016\034\024\033\036" +
    "\012\037\026\001\002\000\026\015\063\025\ufff8\026\ufff8" +
    "\027\ufff8\030\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8\035" +
    "\ufff8\001\002\000\044\002\ufff4\003\ufff4\014\ufff4\015\ufff4" +
    "\017\ufff4\020\ufff4\022\ufff4\023\ufff4\025\ufff4\026\ufff4\027" +
    "\ufff4\030\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4" +
    "\001\002\000\026\015\065\025\ufffb\026\ufffb\027\ufffb\030" +
    "\ufffb\031\ufffb\032\ufffb\033\ufffb\034\036\035\043\001\002" +
    "\000\044\002\ufff7\003\ufff7\014\ufff7\015\ufff7\017\ufff7\020" +
    "\ufff7\022\ufff7\023\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7" +
    "\031\ufff7\032\ufff7\033\ufff7\034\ufff7\035\ufff7\001\002\000" +
    "\026\015\067\025\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa" +
    "\032\ufffa\033\ufffa\034\036\035\043\001\002\000\044\002" +
    "\ufff6\003\ufff6\014\ufff6\015\ufff6\017\ufff6\020\ufff6\022\ufff6" +
    "\023\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6\032" +
    "\ufff6\033\ufff6\034\ufff6\035\ufff6\001\002\000\026\015\071" +
    "\025\ufff9\026\ufff9\027\ufff9\030\ufff9\031\ufff9\032\ufff9\033" +
    "\ufff9\034\ufff9\035\ufff9\001\002\000\044\002\ufff5\003\ufff5" +
    "\014\ufff5\015\ufff5\017\ufff5\020\ufff5\022\ufff5\023\ufff5\025" +
    "\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5\032\ufff5\033\ufff5" +
    "\034\ufff5\035\ufff5\001\002\000\044\002\ufff1\003\ufff1\014" +
    "\ufff1\015\ufff1\017\ufff1\020\ufff1\022\ufff1\023\ufff1\025\ufff1" +
    "\026\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1\034" +
    "\ufff1\035\ufff1\001\002\000\044\002\ufff2\003\ufff2\014\ufff2" +
    "\015\ufff2\017\ufff2\020\ufff2\022\ufff2\023\ufff2\025\ufff2\026" +
    "\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2\034\ufff2" +
    "\035\ufff2\001\002\000\044\002\ufff3\003\ufff3\014\ufff3\015" +
    "\ufff3\017\ufff3\020\ufff3\022\ufff3\023\ufff3\025\ufff3\026\ufff3" +
    "\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3\035" +
    "\ufff3\001\002\000\014\003\031\016\034\024\033\036\012" +
    "\037\026\001\002\000\004\015\077\001\002\000\044\002" +
    "\ufffc\003\ufffc\014\ufffc\015\ufffc\017\ufffc\020\ufffc\022\ufffc" +
    "\023\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc\032" +
    "\ufffc\033\ufffc\034\ufffc\035\ufffc\001\002\000\042\002\uffeb" +
    "\003\uffeb\015\uffeb\017\uffeb\020\uffeb\022\uffeb\023\uffeb\025" +
    "\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc\032\ufffc\033\ufffc" +
    "\034\ufffc\035\ufffc\001\002\000\036\003\uffc8\004\uffc8\005" +
    "\uffc8\006\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8" +
    "\016\uffc8\021\uffc8\024\uffc8\036\uffc8\037\uffc8\001\002\000" +
    "\036\003\023\004\014\005\015\006\013\007\004\010\017" +
    "\011\022\012\006\013\024\016\010\021\007\024\025\036" +
    "\012\037\026\001\002\000\004\024\104\001\002\000\010" +
    "\003\106\014\105\015\107\001\002\000\004\024\112\001" +
    "\002\000\004\015\uffc5\001\002\000\036\003\uffca\004\uffca" +
    "\005\uffca\006\uffca\007\uffca\010\uffca\011\uffca\012\uffca\013" +
    "\uffca\016\uffca\021\uffca\024\uffca\036\uffca\037\uffca\001\002" +
    "\000\004\015\111\001\002\000\036\003\uffc9\004\uffc9\005" +
    "\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9\013\uffc9" +
    "\016\uffc9\021\uffc9\024\uffc9\036\uffc9\037\uffc9\001\002\000" +
    "\010\003\106\014\105\015\uffc7\001\002\000\004\015\uffc6" +
    "\001\002\000\020\002\uffd4\003\uffd4\015\uffd4\017\uffd4\020" +
    "\uffd4\022\uffd4\023\uffd4\001\002\000\036\003\023\004\014" +
    "\005\015\006\013\007\004\010\017\011\022\012\006\013" +
    "\024\016\010\021\007\024\025\036\012\037\026\001\002" +
    "\000\020\002\uffd7\003\uffd7\015\uffd7\017\uffd7\020\uffd7\022" +
    "\uffd7\023\uffd7\001\002\000\036\003\023\004\014\005\015" +
    "\006\013\007\004\010\017\011\022\012\006\013\024\016" +
    "\010\021\007\024\025\036\012\037\026\001\002\000\036" +
    "\003\023\004\014\005\015\006\013\007\004\010\017\011" +
    "\022\012\006\013\024\016\010\021\007\024\025\036\012" +
    "\037\026\001\002\000\036\003\023\004\014\005\015\006" +
    "\013\007\004\010\017\011\022\012\006\013\024\016\010" +
    "\021\007\024\025\036\012\037\026\001\002\000\020\002" +
    "\uffdb\003\uffdb\015\uffdb\017\uffdb\020\115\022\uffdb\023\uffdb" +
    "\001\002\000\020\002\uffd8\003\uffd8\015\uffd8\017\121\020" +
    "\115\022\117\023\120\001\002\000\020\002\uffd9\003\uffd9" +
    "\015\uffd9\017\121\020\115\022\117\023\120\001\002\000" +
    "\020\002\uffda\003\uffda\015\uffda\017\uffda\020\uffda\022\uffda" +
    "\023\uffda\001\002\000\014\003\031\016\034\024\033\036" +
    "\012\037\026\001\002\000\004\015\130\001\002\000\020" +
    "\002\uffe3\003\uffe3\015\uffe3\017\uffe3\020\uffe3\022\uffe3\023" +
    "\uffe3\001\002\000\014\003\031\016\034\024\033\036\012" +
    "\037\026\001\002\000\004\015\133\001\002\000\020\002" +
    "\uffe4\003\uffe4\015\uffe4\017\uffe4\020\uffe4\022\uffe4\023\uffe4" +
    "\001\002\000\014\003\031\016\034\024\033\036\012\037" +
    "\026\001\002\000\014\003\031\016\034\024\033\036\012" +
    "\037\026\001\002\000\014\003\031\016\034\024\033\036" +
    "\012\037\026\001\002\000\014\003\031\016\034\024\033" +
    "\036\012\037\026\001\002\000\014\003\031\016\034\024" +
    "\033\036\012\037\026\001\002\000\030\002\uffde\003\uffde" +
    "\015\uffde\017\uffde\020\uffde\022\uffde\023\uffde\032\042\033" +
    "\037\034\036\035\043\001\002\000\030\002\uffe2\003\uffe2" +
    "\015\uffe2\017\uffe2\020\uffe2\022\uffe2\023\uffe2\032\042\033" +
    "\037\034\036\035\043\001\002\000\030\002\uffe0\003\uffe0" +
    "\015\uffe0\017\uffe0\020\uffe0\022\uffe0\023\uffe0\032\042\033" +
    "\037\034\036\035\043\001\002\000\030\002\uffe1\003\uffe1" +
    "\015\uffe1\017\uffe1\020\uffe1\022\uffe1\023\uffe1\032\042\033" +
    "\037\034\036\035\043\001\002\000\030\002\uffdf\003\uffdf" +
    "\015\uffdf\017\uffdf\020\uffdf\022\uffdf\023\uffdf\032\042\033" +
    "\037\034\036\035\043\001\002\000\014\003\031\016\034" +
    "\024\033\036\012\037\026\001\002\000\004\015\150\001" +
    "\002\000\020\002\uffe5\003\uffe5\015\uffe5\017\uffe5\020\uffe5" +
    "\022\uffe5\023\uffe5\001\002\000\004\002\001\001\002\000" +
    "\014\003\031\016\034\024\033\036\012\037\026\001\002" +
    "\000\004\015\154\001\002\000\020\002\uffe8\003\uffe8\015" +
    "\uffe8\017\uffe8\020\uffe8\022\uffe8\023\uffe8\001\002\000\014" +
    "\003\031\016\034\024\033\036\012\037\026\001\002\000" +
    "\004\015\157\001\002\000\020\002\uffe9\003\uffe9\015\uffe9" +
    "\017\uffe9\020\uffe9\022\uffe9\023\uffe9\001\002\000\014\003" +
    "\031\016\034\024\033\036\012\037\026\001\002\000\004" +
    "\015\162\001\002\000\020\002\uffe7\003\uffe7\015\uffe7\017" +
    "\uffe7\020\uffe7\022\uffe7\023\uffe7\001\002\000\006\003\101" +
    "\016\103\001\002\000\036\003\023\004\014\005\015\006" +
    "\013\007\004\010\017\011\022\012\006\013\024\016\010" +
    "\021\007\024\025\036\012\037\026\001\002\000\016\003" +
    "\uffdc\015\213\017\uffdc\020\uffdc\022\uffdc\023\uffdc\001\002" +
    "\000\024\025\140\026\134\027\136\030\135\031\137\032" +
    "\060\033\057\034\056\035\061\001\002\000\014\003\176" +
    "\017\201\020\175\022\177\023\200\001\002\000\006\003" +
    "\101\016\103\001\002\000\032\003\027\015\074\016\030" +
    "\025\uffff\026\uffff\027\uffff\030\uffff\031\uffff\032\uffff\033" +
    "\uffff\034\uffff\035\uffff\001\002\000\036\003\023\004\014" +
    "\005\015\006\013\007\004\010\017\011\022\012\006\013" +
    "\024\016\010\021\007\024\025\036\012\037\026\001\002" +
    "\000\016\003\uffd4\015\174\017\uffd4\020\uffd4\022\uffd4\023" +
    "\uffd4\001\002\000\020\002\uffcb\003\uffcb\015\uffcb\017\uffcb" +
    "\020\uffcb\022\uffcb\023\uffcb\001\002\000\036\003\023\004" +
    "\014\005\015\006\013\007\004\010\017\011\022\012\006" +
    "\013\024\016\010\021\007\024\025\036\012\037\026\001" +
    "\002\000\016\003\uffd7\015\210\017\uffd7\020\uffd7\022\uffd7" +
    "\023\uffd7\001\002\000\036\003\023\004\014\005\015\006" +
    "\013\007\004\010\017\011\022\012\006\013\024\016\010" +
    "\021\007\024\025\036\012\037\026\001\002\000\036\003" +
    "\023\004\014\005\015\006\013\007\004\010\017\011\022" +
    "\012\006\013\024\016\010\021\007\024\025\036\012\037" +
    "\026\001\002\000\036\003\023\004\014\005\015\006\013" +
    "\007\004\010\017\011\022\012\006\013\024\016\010\021" +
    "\007\024\025\036\012\037\026\001\002\000\016\003\uffdb" +
    "\015\203\017\uffdb\020\115\022\uffdb\023\uffdb\001\002\000" +
    "\020\002\uffd2\003\uffd2\015\uffd2\017\uffd2\020\uffd2\022\uffd2" +
    "\023\uffd2\001\002\000\016\003\uffd8\015\205\017\121\020" +
    "\115\022\117\023\120\001\002\000\020\002\uffcf\003\uffcf" +
    "\015\uffcf\017\uffcf\020\uffcf\022\uffcf\023\uffcf\001\002\000" +
    "\016\003\uffd9\015\207\017\121\020\115\022\117\023\120" +
    "\001\002\000\020\002\uffd0\003\uffd0\015\uffd0\017\uffd0\020" +
    "\uffd0\022\uffd0\023\uffd0\001\002\000\020\002\uffce\003\uffce" +
    "\015\uffce\017\uffce\020\uffce\022\uffce\023\uffce\001\002\000" +
    "\016\003\uffda\015\212\017\uffda\020\uffda\022\uffda\023\uffda" +
    "\001\002\000\020\002\uffd1\003\uffd1\015\uffd1\017\uffd1\020" +
    "\uffd1\022\uffd1\023\uffd1\001\002\000\020\002\uffdd\003\uffdd" +
    "\015\uffdd\017\uffdd\020\uffdd\022\uffdd\023\uffdd\001\002\000" +
    "\016\003\uffd6\015\215\017\uffd6\020\uffd6\022\uffd6\023\uffd6" +
    "\001\002\000\020\002\uffcd\003\uffcd\015\uffcd\017\uffcd\020" +
    "\uffcd\022\uffcd\023\uffcd\001\002\000\036\003\023\004\014" +
    "\005\015\006\013\007\004\010\017\011\022\012\006\013" +
    "\024\016\010\021\007\024\025\036\012\037\026\001\002" +
    "\000\016\003\uffd5\015\220\017\uffd5\020\uffd5\022\uffd5\023" +
    "\uffd5\001\002\000\020\002\uffcc\003\uffcc\015\uffcc\017\uffcc" +
    "\020\uffcc\022\uffcc\023\uffcc\001\002\000\020\002\uffd6\003" +
    "\uffd6\015\uffd6\017\uffd6\020\uffd6\022\uffd6\023\uffd6\001\002" +
    "\000\036\003\023\004\014\005\015\006\013\007\004\010" +
    "\017\011\022\012\006\013\024\016\010\021\007\024\025" +
    "\036\012\037\026\001\002\000\020\002\uffd5\003\uffd5\015" +
    "\uffd5\017\uffd5\020\uffd5\022\uffd5\023\uffd5\001\002\000\014" +
    "\003\031\016\034\024\033\036\012\037\026\001\002\000" +
    "\004\015\226\001\002\000\020\002\uffe6\003\uffe6\015\uffe6" +
    "\017\uffe6\020\uffe6\022\uffe6\023\uffe6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\224\000\014\003\015\005\017\007\010\010\020\013" +
    "\004\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\221\001\001\000\012\005\017\007\010\010\220\013" +
    "\004\001\001\000\012\005\165\007\164\010\166\013\004" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\101\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\031\005\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\054\001\001\000" +
    "\004\006\043\001\001\000\004\005\050\001\001\000\004" +
    "\005\047\001\001\000\006\004\046\005\034\001\001\000" +
    "\002\001\001\000\004\005\045\001\001\000\004\005\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\067\001\001\000\004\005\065" +
    "\001\001\000\004\005\063\001\001\000\004\005\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\075\005\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\005\017\007\010\010\113\013" +
    "\004\001\001\000\002\001\001\000\004\012\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\005\017\007" +
    "\010\010\124\013\004\001\001\000\002\001\001\000\012" +
    "\005\017\007\010\010\123\013\004\001\001\000\012\005" +
    "\017\007\010\010\122\013\004\001\001\000\012\005\017" +
    "\007\010\010\121\013\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\126\005\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\131\005\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\144\001\001\000\004\005" +
    "\143\001\001\000\004\005\142\001\001\000\004\005\141" +
    "\001\001\000\004\005\140\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\146\005\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\152" +
    "\005\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\155\005\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\160\005\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\215\001\001\000\012" +
    "\005\017\007\010\010\213\013\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\171" +
    "\001\001\000\002\001\001\000\012\005\017\007\010\010" +
    "\172\013\004\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\005\017\007\010\010\210\013\004\001\001\000" +
    "\002\001\001\000\012\005\017\007\010\010\205\013\004" +
    "\001\001\000\012\005\017\007\010\010\203\013\004\001" +
    "\001\000\012\005\017\007\010\010\201\013\004\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\005\017" +
    "\007\010\010\216\013\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\005\017\007\010" +
    "\010\222\013\004\001\001\000\002\001\001\000\006\004" +
    "\224\005\034\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




  private Vector clauses;
  private String [] prologClauses;
  private Vector errors;
  protected ODEService odeService;
  protected String ontologyName;

  public String[] getClauses() {
    CTree elemento=null;
    int contador=0;
    int longitud=clauses.size();
    String [] result=new String[longitud];

    while (contador<longitud) {
      elemento=(CTree)clauses.elementAt(contador);
      result[contador]=Utility.transforma_string(elemento);
      contador++;
    }
    return result;
  }

  public String[] getPrologClauses() {
    return prologClauses;
  }

  public parser(java_cup.runtime.Scanner s, ODEService odeService, String ont) {
    super(s);
    this.odeService=odeService;
    this.ontologyName=ont;
    errors=new Vector();
  }


  public void report_error(String message, Object info) {
    errors.add(message);
    if (info instanceof Symbol)
      if (((Symbol)info).left != -1)
        errors.add(" at character " + ((Symbol)info).left +   " of input");
  }

  public void finalizado(CTree arbol)throws AxiomException {
    if (errors.isEmpty()) {
      Utility.pinta_formula(arbol);

      clauses=Utility.ObternerClausulaHorn(arbol);
      CTree aux=(CTree)(clauses.elementAt(0));

      prologClauses=Utility.TraducirProlog(clauses);


    }
    else {
      throw new AxiomException(errors);
    }
  }

  public void report_fatal_error(String message, Object info)  throws AxiomException {
    /* stop parsing (not really necessary since we throw an exception, but) */
    done_parsing();

    /* use the normal error message reporting to put out the message */
    report_error("Expected \")\" \",\"  or \".\" ", info);
    report_error("------------------------------","");

    /* throw an exception */
    throw new AxiomException(errors);
  }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // resto_variables ::= error 
            {
              CAtributo RESULT = null;
		int errleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		

      RESULT=new CAtributo();
        RESULT.lista=new Vector();
        RESULT.lista.addElement("error");
      parser.report_error("Error: Malformed list of quantified variables ","");
      parser.report_error("  expected  \")\"  \",\"  or \".\" ","");
      parser.report_error("------------------------------","");


      
              CUP$parser$result = new java_cup.runtime.Symbol(8/*resto_variables*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // resto_variables ::= COMA IDENTIFICADOR resto_variables 
            {
              CAtributo RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Yytoken id = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CAtributo rv = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
          RESULT=new CAtributo();
          rv.lista.addElement(id.m_text);
      RESULT.lista=rv.lista;

        
              CUP$parser$result = new java_cup.runtime.Symbol(8/*resto_variables*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // resto_variables ::= COMA IDENTIFICADOR 
            {
              CAtributo RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Yytoken id = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		

          RESULT=new CAtributo();
      RESULT.lista=new Vector();
      RESULT.lista.addElement(id.m_text);

        
              CUP$parser$result = new java_cup.runtime.Symbol(8/*resto_variables*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // lista_variables ::= error 
            {
              CAtributo RESULT = null;
		int errleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		

      RESULT=new CAtributo();
        RESULT.lista=new Vector();
        RESULT.lista.addElement("error");
      parser.report_error("Error: Malformed list of quantified variables ","");
      parser.report_error("  expected  \")\"  \",\"  or \".\" ","");
      parser.report_error("------------------------------","");


      
              CUP$parser$result = new java_cup.runtime.Symbol(7/*lista_variables*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // lista_variables ::= PARENABIERTO IDENTIFICADOR resto_variables PARENCERRADO 
            {
              CAtributo RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Yytoken id = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CAtributo rv = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
          RESULT=new CAtributo();
          rv.lista.addElement(id.m_text);
      RESULT.lista=rv.lista;

        
              CUP$parser$result = new java_cup.runtime.Symbol(7/*lista_variables*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // lista_variables ::= PARENABIERTO IDENTIFICADOR PARENCERRADO 
            {
              CAtributo RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Yytoken id = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
          RESULT=new CAtributo();
      RESULT.lista=new Vector();
      RESULT.lista.addElement(id.m_text);


        
              CUP$parser$result = new java_cup.runtime.Symbol(7/*lista_variables*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // fbf_entre_parentesis ::= PARENABIERTO EXISTS lista_variables fbf PARENCERRADO 
            {
              CAtributo RESULT = null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CAtributo lv = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CAtributo f1 = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
          RESULT=new CAtributo();
      RESULT.arbol=new CTree();
      RESULT.arbol.Add(f1.arbol,"exists",CNodeType.NODO_EXISTS);
      RESULT.arbol.lista=lv.lista;

          
              CUP$parser$result = new java_cup.runtime.Symbol(9/*fbf_entre_parentesis*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // fbf_entre_parentesis ::= PARENABIERTO FORALL lista_variables fbf PARENCERRADO 
            {
              CAtributo RESULT = null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CAtributo lv = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CAtributo f1 = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
          RESULT=new CAtributo();
      RESULT.arbol=new CTree();
      RESULT.arbol.Add(f1.arbol,"forall",CNodeType.NODO_FORALL);
      RESULT.arbol.lista=lv.lista;


          
              CUP$parser$result = new java_cup.runtime.Symbol(9/*fbf_entre_parentesis*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // fbf_entre_parentesis ::= PARENABIERTO NOT fbf PARENCERRADO 
            {
              CAtributo RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CAtributo f1 = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
          RESULT=new CAtributo();
      RESULT.arbol=new CTree();
      RESULT.arbol.Add(f1.arbol,"not",CNodeType.NODO_NOT);

          
              CUP$parser$result = new java_cup.runtime.Symbol(9/*fbf_entre_parentesis*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // fbf_entre_parentesis ::= PARENABIERTO fbf error PARENCERRADO 
            {
              CAtributo RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CAtributo f1 = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

      RESULT=new CAtributo();
      RESULT.codigo="error";
        RESULT.arbol=new CTree();
        RESULT.type=AxiomConstant.ERROR;
        RESULT.arbol.Add(f1.arbol,"and",CNodeType.NODO_AND,f1.arbol);
      parser.report_error("Error: Malformed term  ","");
      parser.report_error("  expected  \"and\"  \"or\" \"->\" \"<->\" or Malformed list of quantified variables","");
      parser.report_error("------------------------------","");


      
              CUP$parser$result = new java_cup.runtime.Symbol(9/*fbf_entre_parentesis*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // fbf_entre_parentesis ::= PARENABIERTO fbf DOBLEIMPLICA fbf PARENCERRADO 
            {
              CAtributo RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		CAtributo f1 = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CAtributo f2 = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
          RESULT=new CAtributo();
      RESULT.arbol=new CTree();
      RESULT.arbol.Add(f1.arbol,"dobleimplica",CNodeType.NODO_DOBLEIMPLICA,f2.arbol);

          
              CUP$parser$result = new java_cup.runtime.Symbol(9/*fbf_entre_parentesis*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // fbf_entre_parentesis ::= PARENABIERTO fbf IMPLICA fbf PARENCERRADO 
            {
              CAtributo RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		CAtributo f1 = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CAtributo f2 = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
          RESULT=new CAtributo();
      RESULT.arbol=new CTree();
      RESULT.arbol.Add(f1.arbol,"implica",CNodeType.NODO_IMPLICA,f2.arbol);

          
              CUP$parser$result = new java_cup.runtime.Symbol(9/*fbf_entre_parentesis*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // fbf_entre_parentesis ::= PARENABIERTO fbf AND fbf PARENCERRADO 
            {
              CAtributo RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		CAtributo f1 = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CAtributo f2 = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
          RESULT=new CAtributo();
          RESULT.arbol=new CTree();
          RESULT.arbol.Add(f1.arbol,"and",CNodeType.NODO_AND,f2.arbol);

          
              CUP$parser$result = new java_cup.runtime.Symbol(9/*fbf_entre_parentesis*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // fbf_entre_parentesis ::= PARENABIERTO fbf OR fbf PARENCERRADO 
            {
              CAtributo RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		CAtributo f1 = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CAtributo f2 = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
      RESULT=new CAtributo();
      RESULT.arbol=new CTree();
      RESULT.arbol.Add(f1.arbol,"or",CNodeType.NODO_OR,f2.arbol);

          
              CUP$parser$result = new java_cup.runtime.Symbol(9/*fbf_entre_parentesis*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // fbf ::= fbf_entre_parentesis 
            {
              CAtributo RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CAtributo f1 = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
    RESULT=new CAtributo();
    RESULT.arbol=f1.arbol;

    
              CUP$parser$result = new java_cup.runtime.Symbol(6/*fbf*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // fbf ::= EXISTS lista_variables fbf 
            {
              CAtributo RESULT = null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CAtributo lv = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CAtributo f1 = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		

    RESULT=new CAtributo();
      RESULT.arbol=new CTree();
      RESULT.arbol.Add(f1.arbol,"exists",CNodeType.NODO_EXISTS);
      RESULT.arbol.lista=lv.lista;

    
              CUP$parser$result = new java_cup.runtime.Symbol(6/*fbf*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // fbf ::= FORALL lista_variables fbf 
            {
              CAtributo RESULT = null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CAtributo lv = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CAtributo f1 = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
    RESULT=new CAtributo();
      RESULT.arbol=new CTree();
      RESULT.arbol.Add(f1.arbol,"forall",CNodeType.NODO_FORALL);
      RESULT.arbol.lista=lv.lista;


    
              CUP$parser$result = new java_cup.runtime.Symbol(6/*fbf*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // fbf ::= NOT fbf 
            {
              CAtributo RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CAtributo f1 = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
    RESULT=new CAtributo();
      RESULT.arbol=new CTree();
      RESULT.arbol.Add(f1.arbol,"not",CNodeType.NODO_NOT);

    
              CUP$parser$result = new java_cup.runtime.Symbol(6/*fbf*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // fbf ::= fbf error 
            {
              CAtributo RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CAtributo f1 = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		

      RESULT=new CAtributo();
      RESULT.codigo="error";
      RESULT.arbol=new CTree();
      RESULT.type=AxiomConstant.ERROR;
      RESULT.arbol.Add(f1.arbol,"and",CNodeType.NODO_AND,f1.arbol);
      parser.report_error("Error: Malformed term  ","");
      parser.report_error("  expected  \"and\"  \"or\" \"->\" \"<->\" or Malformed list of quantified variables","");
      parser.report_error("------------------------------","");


      
              CUP$parser$result = new java_cup.runtime.Symbol(6/*fbf*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // fbf ::= fbf DOBLEIMPLICA fbf 
            {
              CAtributo RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CAtributo f1 = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CAtributo f2 = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
    RESULT=new CAtributo();
    RESULT.arbol=new CTree();
    RESULT.arbol.Add(f1.arbol,"dobleimplica",CNodeType.NODO_DOBLEIMPLICA,f2.arbol);

    
              CUP$parser$result = new java_cup.runtime.Symbol(6/*fbf*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // fbf ::= fbf IMPLICA fbf 
            {
              CAtributo RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CAtributo f1 = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CAtributo f2 = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
    RESULT=new CAtributo();
    RESULT.arbol=new CTree();
    RESULT.arbol.Add(f1.arbol,"implica",CNodeType.NODO_IMPLICA,f2.arbol);

    
              CUP$parser$result = new java_cup.runtime.Symbol(6/*fbf*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // fbf ::= fbf AND fbf 
            {
              CAtributo RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CAtributo f1 = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CAtributo f2 = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
    RESULT=new CAtributo();
    RESULT.arbol=new CTree();
    RESULT.arbol.Add(f1.arbol,"and",CNodeType.NODO_AND,f2.arbol);

    
              CUP$parser$result = new java_cup.runtime.Symbol(6/*fbf*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // fbf ::= fbf OR fbf 
            {
              CAtributo RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CAtributo f1 = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CAtributo f2 = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
    RESULT=new CAtributo();
    RESULT.arbol=new CTree();
    RESULT.arbol.Add(f1.arbol,"or",CNodeType.NODO_OR,f2.arbol);

    
              CUP$parser$result = new java_cup.runtime.Symbol(6/*fbf*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // fbf ::= atomo 
            {
              CAtributo RESULT = null;
		int atomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int atomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CAtributo atom = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
    RESULT=new CAtributo();
    RESULT.arbol=new CTree();
    RESULT.arbol.Add(null,atom.codigo,CNodeType.NODO_HOJA,null);
    RESULT.arbol.prolog=atom.prolog;
    RESULT.arbol.prolog=RESULT.arbol.prolog.replace('$', ' ');
    RESULT.arbol.prolog=RESULT.arbol.prolog.replace('~', ' ');


  
              CUP$parser$result = new java_cup.runtime.Symbol(6/*fbf*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // atomo ::= PARENABIERTO atomo PARENCERRADO 
            {
              CAtributo RESULT = null;
		int term1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int term1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CAtributo term1 = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT=new CAtributo();
        RESULT.codigo= "(" + term1.codigo + ")";
        RESULT.type=term1.type;
        RESULT.prolog=term1.prolog;
      
              CUP$parser$result = new java_cup.runtime.Symbol(5/*atomo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // atomo ::= termino IGUAL termino 
            {
              CAtributo RESULT = null;
		int term1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int term1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CAtributo term1 = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int term2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int term2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CAtributo term2 = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
        RESULT=new CAtributo();
        RESULT.codigo=term1.codigo + "=" + term2.codigo;
        RESULT.type=AxiomConstant.BOOLEAN;
        RESULT.prolog=RESULT.codigo;

        if (term1.type!=term2.type) {
          RESULT.type=AxiomConstant.ERROR;
          parser.report_error("Error: Couldn't compare " + term1.codigo + "and" + term2.codigo,"");
          parser.report_error("operator = cannot be applied with different types","");
          parser.report_error("------------------------------","");
        }

      
              CUP$parser$result = new java_cup.runtime.Symbol(5/*atomo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // atomo ::= termino MENORIGUAL termino 
            {
              CAtributo RESULT = null;
		int term1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int term1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CAtributo term1 = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int term2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int term2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CAtributo term2 = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
        RESULT=new CAtributo();
        RESULT.codigo=term1.codigo + "<=" + term2.codigo;
        RESULT.prolog=RESULT.codigo;

        if ( (term1.type==AxiomConstant.NUMBER || term1.type==AxiomConstant.FUNCTION)  && (term2.type==AxiomConstant.NUMBER || term2.type==AxiomConstant.FUNCTION)) {
            RESULT.type=AxiomConstant.BOOLEAN;
        }
        else {
          RESULT.type=AxiomConstant.ERROR;
          parser.report_error("Error: Couldn't compare " + term1.codigo + "and" + term2.codigo,"");
          parser.report_error("  they aren't numerical values","");
          parser.report_error("------------------------------","");
        }


      
              CUP$parser$result = new java_cup.runtime.Symbol(5/*atomo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // atomo ::= termino MAYORIGUAL termino 
            {
              CAtributo RESULT = null;
		int term1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int term1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CAtributo term1 = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int term2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int term2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CAtributo term2 = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
      RESULT=new CAtributo();
      RESULT.codigo=term1.codigo + ">=" + term2.codigo;
      RESULT.prolog=RESULT.codigo;

      if ( (term1.type==AxiomConstant.NUMBER || term1.type==AxiomConstant.FUNCTION)  && (term2.type==AxiomConstant.NUMBER || term2.type==AxiomConstant.FUNCTION)) {
        RESULT.type=AxiomConstant.BOOLEAN;
      }
      else {
        RESULT.type=AxiomConstant.ERROR;
        parser.report_error("Error: Couldn't compare " + term1.codigo + "and" + term2.codigo,"");
        parser.report_error("  they aren't numerical values","");
        parser.report_error("------------------------------","");
      }

      
              CUP$parser$result = new java_cup.runtime.Symbol(5/*atomo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // atomo ::= termino MENOR termino 
            {
              CAtributo RESULT = null;
		int term1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int term1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CAtributo term1 = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int term2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int term2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CAtributo term2 = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
        RESULT=new CAtributo();
        RESULT.codigo=term1.codigo + "<" + term2.codigo;
        RESULT.prolog=RESULT.codigo;

      if ( (term1.type==AxiomConstant.NUMBER || term1.type==AxiomConstant.FUNCTION)  && (term2.type==AxiomConstant.NUMBER || term2.type==AxiomConstant.FUNCTION)) {
        RESULT.type=AxiomConstant.BOOLEAN;
      }
      else {
        RESULT.type=AxiomConstant.ERROR;
        parser.report_error("Error: Couldn't compare " + term1.codigo + "and" + term2.codigo,"");
        parser.report_error("  they aren't numerical values","");
        parser.report_error("------------------------------","");


      }


      
              CUP$parser$result = new java_cup.runtime.Symbol(5/*atomo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // atomo ::= termino MAYOR termino 
            {
              CAtributo RESULT = null;
		int term1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int term1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CAtributo term1 = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int term2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int term2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CAtributo term2 = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
      RESULT=new CAtributo();
      RESULT.codigo=term1.codigo + ">" + term2.codigo;
      RESULT.prolog=RESULT.codigo;

      if ( (term1.type==AxiomConstant.NUMBER || term1.type==AxiomConstant.FUNCTION)  && (term2.type==AxiomConstant.NUMBER || term2.type==AxiomConstant.FUNCTION)) {
          RESULT.type=AxiomConstant.BOOLEAN;
      }
      else {
        RESULT.type=AxiomConstant.ERROR;
        parser.report_error("Error: Couldn't compare " + term1.codigo + "and" + term2.codigo,"");
        parser.report_error("  they aren't numerical values","");
        parser.report_error("------------------------------","");
      }
      
              CUP$parser$result = new java_cup.runtime.Symbol(5/*atomo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // atomo ::= error PARENABIERTO lista_terminos PARENCERRADO 
            {
              CAtributo RESULT = null;
		int errleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CAtributo list = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

      RESULT=new CAtributo();
      RESULT.codigo="error";
      RESULT.type=AxiomConstant.ERROR;
      RESULT.prolog="error";
      parser.report_error("Error: Malformed term varibles list","");
      parser.report_error("  expected  \"relation\"  \"attribute\" or   \"concept\" name ","");
      parser.report_error("------------------------------","");



      
              CUP$parser$result = new java_cup.runtime.Symbol(5/*atomo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // atomo ::= INSTRANSITIVE PARENABIERTO lista_terminos PARENCERRADO 
            {
              CAtributo RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Yytoken id = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CAtributo list = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
      RESULT=new CAtributo();

      RESULT.codigo=id.m_text + "(" + list.codigo + ")";
      RESULT.type=AxiomConstant.BOOLEAN;
      RESULT.prolog=RESULT.codigo;


      if (list.nterminos != 2){
        parser.report_error("Error:","");
        parser.report_error(id.m_text + " must to have two terms","");
        parser.report_error("------------------------------","");
      }



       
              CUP$parser$result = new java_cup.runtime.Symbol(5/*atomo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // atomo ::= TRANSITIVE PARENABIERTO lista_terminos PARENCERRADO 
            {
              CAtributo RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Yytoken id = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CAtributo list = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
      RESULT=new CAtributo();

      RESULT.codigo=id.m_text + "(" + list.codigo + ")";
      RESULT.type=AxiomConstant.BOOLEAN;
      RESULT.prolog=RESULT.codigo;

      if (list.nterminos != 2){
        parser.report_error("Error:","");
        parser.report_error(id.m_text + " must to have two terms","");
        parser.report_error("------------------------------","");
      }


      
              CUP$parser$result = new java_cup.runtime.Symbol(5/*atomo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // atomo ::= EXHAUSTIVE PARENABIERTO lista_terminos PARENCERRADO 
            {
              CAtributo RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Yytoken id = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CAtributo list = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
      RESULT=new CAtributo();

      RESULT.codigo=id.m_text + "(" + list.codigo + ")";
      RESULT.type=AxiomConstant.BOOLEAN;
      RESULT.prolog=RESULT.codigo;

      if (list.nterminos != 2){

        parser.report_error("Error:","");
        parser.report_error(id.m_text + " must to have two terms","");
        parser.report_error("------------------------------","");
      }


      
              CUP$parser$result = new java_cup.runtime.Symbol(5/*atomo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // atomo ::= DISJOINT PARENABIERTO lista_terminos PARENCERRADO 
            {
              CAtributo RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Yytoken id = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CAtributo list = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
      RESULT=new CAtributo();

      RESULT.codigo=id.m_text + "(" + list.codigo + ")";
      RESULT.type=AxiomConstant.BOOLEAN;
      RESULT.prolog=RESULT.codigo;

      if (list.nterminos != 2){
        parser.report_error("Error:","");
        parser.report_error(id.m_text + " must to have two terms","");
        parser.report_error("------------------------------","");
      }


      
              CUP$parser$result = new java_cup.runtime.Symbol(5/*atomo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // atomo ::= NOT_SUBCLASS PARENABIERTO lista_terminos PARENCERRADO 
            {
              CAtributo RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Yytoken id = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CAtributo list = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
      RESULT=new CAtributo();

      RESULT.codigo=id.m_text + "(" + list.codigo + ")";
      RESULT.type=AxiomConstant.BOOLEAN;
      RESULT.prolog=RESULT.codigo;



      if (list.nterminos != 2){

          parser.report_error("Error:","");
          parser.report_error(id.m_text + " must to have two terms","");
          parser.report_error("------------------------------","");
      }

      
              CUP$parser$result = new java_cup.runtime.Symbol(5/*atomo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // atomo ::= SUBCLASS PARENABIERTO lista_terminos PARENCERRADO 
            {
              CAtributo RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Yytoken id = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CAtributo list = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
      RESULT=new CAtributo();

      RESULT.codigo=id.m_text + "(" + list.codigo + ")";
      RESULT.type=AxiomConstant.BOOLEAN;
      RESULT.prolog=RESULT.codigo;



      if (list.nterminos != 2) {

          parser.report_error("Error:","");
          parser.report_error(id.m_text + " must to have two terms","");
          parser.report_error("------------------------------","");
      }


      
              CUP$parser$result = new java_cup.runtime.Symbol(5/*atomo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // atomo ::= IDENTIFICADOR error 
            {
              CAtributo RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Yytoken id = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		

      RESULT=new CAtributo();
      RESULT.codigo="error";
      RESULT.type=AxiomConstant.ERROR;
      RESULT.prolog="error";
      parser.report_error("Error: Malformed term list of "+id.m_text,"");
      parser.report_error("  expected  \")\"  \",\"  or \".\" ","");
      parser.report_error("------------------------------","");

      
              CUP$parser$result = new java_cup.runtime.Symbol(5/*atomo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // atomo ::= IDENTIFICADOR PARENABIERTO lista_terminos PARENCERRADO 
            {
              CAtributo RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Yytoken id = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CAtributo list = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

      RESULT=new CAtributo();
      RESULT.codigo=id.m_text + "(" + list.codigo + ")";

      RESULT.type=AxiomConstant.BOOLEAN;
      RESULT.prolog=null;

      if (list.nterminos==1) {
        Term term=parser.odeService.getTerm(parser.ontologyName,id.m_text);
        if(term!=null) {
          RESULT.prolog="instance_of("+list.terminos.elementAt(0)+","+ id.m_text+")";
          RESULT.prolog=RESULT.prolog.replace(' ','_');
          RESULT.prolog=RESULT.prolog.toLowerCase();
          if (term.type != TermTypes.CONCEPT) {
            parser.report_error("Error:","");
            parser.report_error(id.m_text + " must be a concept","");
            parser.report_error("------------------------------","");
          }
        }
        else {
            parser.report_error("Error:","");
            parser.report_error(id.m_text + " doesn't exist in the ontology","");
            parser.report_error("------------------------------","");
        }


      }
      else if (list.nterminos==2){

        try{

          boolean encontrado=false;
          int i=0;

          TermRelation [] aux=parser.odeService.getTermRelations(parser.ontologyName, true);
          while(aux!=null && !encontrado && i<aux.length) {
            encontrado=aux[i].name.equals(id.m_text);
            i++;
          }

          i=0;
          Term [] aux1=parser.odeService.getTerms(parser.ontologyName,new int [] {TermTypes.INSTANCE_ATTRIBUTE});
          while(aux1!=null && !encontrado && i<aux1.length) {
            encontrado=aux1[i].term.equals(id.m_text);
            i++;
          }

          i=0;
          aux1=parser.odeService.getTerms(parser.ontologyName,new int [] {TermTypes.CLASS_ATTRIBUTE});
          while(aux1!=null && !encontrado && i<aux1.length) {
            encontrado=aux1[i].term.equals(id.m_text);
            i++;
          }

          if ( !encontrado ) {
            parser.report_error("Error:","");
            parser.report_error(id.m_text + " must be a attribute or a relation","");
            parser.report_error("------------------------------","");
          }
          else {

            RESULT.prolog="value_facet_of(" + (String)list.terminos.elementAt(0) + ",value,"+ id.m_text+ "," + list.terminos.elementAt(1)+")";
            RESULT.prolog=RESULT.prolog.replace(' ','_');
            RESULT.prolog=RESULT.prolog.toLowerCase();
          }


        }
        catch (NullPointerException e){
            parser.report_error("Error:","");
            parser.report_error(id.m_text + " doesn't exist in the ontology","");
            parser.report_error("------------------------------","");
        }
      }
      else {
          parser.report_error("Error:","");
          parser.report_error(id.m_text + " cannot have three or more terms","");
          parser.report_error("------------------------------","");
      }
      
              CUP$parser$result = new java_cup.runtime.Symbol(5/*atomo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // resto_lista_terminos ::= error 
            {
              CAtributo RESULT = null;
		int errleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		

      RESULT=new CAtributo();
      RESULT.codigo="error";
      RESULT.type=AxiomConstant.ERROR;
      RESULT.terminos=null;
      parser.report_error("Error: Malformed  term list  ","");
      parser.report_error("  expected  \")\"  \",\"  or \".\" ","");
      parser.report_error("------------------------------","");


      
              CUP$parser$result = new java_cup.runtime.Symbol(4/*resto_lista_terminos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // resto_lista_terminos ::= 
            {
              CAtributo RESULT = null;
		

          RESULT=new CAtributo();
      RESULT.codigo="";
      RESULT.nterminos=0;
      RESULT.terminos=new Vector();


          
              CUP$parser$result = new java_cup.runtime.Symbol(4/*resto_lista_terminos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // resto_lista_terminos ::= COMA lista_terminos 
            {
              CAtributo RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CAtributo list = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		

          RESULT=new CAtributo();
          RESULT.codigo= "," + list.codigo;
          RESULT.nterminos=list.nterminos;
          RESULT.terminos=list.terminos;

          
              CUP$parser$result = new java_cup.runtime.Symbol(4/*resto_lista_terminos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // lista_terminos ::= termino resto_lista_terminos 
            {
              CAtributo RESULT = null;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CAtributo term = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int restleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int restright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CAtributo rest = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		

        RESULT=new CAtributo();
        RESULT.codigo=term.codigo + rest.codigo;
        RESULT.nterminos=rest.nterminos+1;
        RESULT.terminos=rest.terminos;
        RESULT.terminos.addElement(term.codigo);


        
              CUP$parser$result = new java_cup.runtime.Symbol(2/*lista_terminos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // termino ::= error 
            {
              CAtributo RESULT = null;
		int errleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		

      RESULT=new CAtributo();
      RESULT.codigo="error";
      RESULT.type=AxiomConstant.ERROR;
      parser.report_error("Error: Malformed term list  ","");
      parser.report_error("  expected  \")\"  \",\"  or \".\" ","");
      parser.report_error("------------------------------","");


      
              CUP$parser$result = new java_cup.runtime.Symbol(3/*termino*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // termino ::= PARENABIERTO NUMEROENTERO PARENCERRADO 
            {
              CAtributo RESULT = null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Yytoken num = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
      RESULT=new CAtributo();
      RESULT.codigo= "(" + num.m_text + ")";
      RESULT.type=AxiomConstant.NUMBER;

      
              CUP$parser$result = new java_cup.runtime.Symbol(3/*termino*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // termino ::= PARENABIERTO NUMEROREAL PARENCERRADO 
            {
              CAtributo RESULT = null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Yytoken num = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
      RESULT=new CAtributo();
      RESULT.codigo="(" + num.m_text + ")";
      RESULT.type=AxiomConstant.NUMBER;
      
              CUP$parser$result = new java_cup.runtime.Symbol(3/*termino*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // termino ::= PARENABIERTO IDENTIFICADOR PARENCERRADO 
            {
              CAtributo RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Yytoken id = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
      RESULT=new CAtributo();
      Term term=parser.odeService.getTerm(parser.ontologyName,id.m_text);

      if(term!=null) {
        if (term.type!=TermTypes.CONSTANT) {
          //esta en la ontologia pero nos da igual
          //parser.report_error("Error:","");
          //parser.report_error(id.m_text +" is a term of the ontology, please use other name","");
          RESULT.type=AxiomConstant.VARIABLE;

          RESULT.codigo= "$" + id.m_text + "~" ;
        }
        else {
          /*no hacemos nada es una constante*/
          RESULT.codigo= id.m_text ;

          int type=parser.odeService.getConstant(parser.ontologyName,id.m_text).valueType;
          if (type==ValueTypes.CARDINAL || type==ValueTypes.FLOAT || type==ValueTypes.INTEGER || type==ValueTypes.RANGE){
            RESULT.type=AxiomConstant.NUMBER;
          }
        }

      }
      else {
        /*marcamos que es una variable*/
          RESULT.type=AxiomConstant.VARIABLE;

          RESULT.codigo= "$" + id.m_text + "~" ;
      }
      
              CUP$parser$result = new java_cup.runtime.Symbol(3/*termino*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // termino ::= PARENABIERTO termino DIVISION termino PARENCERRADO 
            {
              CAtributo RESULT = null;
		int term1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int term1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		CAtributo term1 = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int term2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int term2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CAtributo term2 = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
      RESULT=new CAtributo();
        RESULT.codigo= "(" + term1.codigo + "/" + term2.codigo + ")";
      if ( (term1.type==AxiomConstant.NUMBER || term1.type==AxiomConstant.FUNCTION)  && (term2.type==AxiomConstant.NUMBER || term2.type==AxiomConstant.FUNCTION)) {
          RESULT.type=AxiomConstant.NUMBER;
      }
      else {
          RESULT.type=AxiomConstant.ERROR;
        parser.report_error("Error: Couldn't divide " + term1.codigo + "and" + term2.codigo,"");
        parser.report_error("  they aren't numerical values","");
        parser.report_error("------------------------------","");


      }
      
              CUP$parser$result = new java_cup.runtime.Symbol(3/*termino*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // termino ::= PARENABIERTO termino MULTIPLICACION termino PARENCERRADO 
            {
              CAtributo RESULT = null;
		int term1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int term1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		CAtributo term1 = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int term2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int term2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CAtributo term2 = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
      RESULT=new CAtributo();
        RESULT.codigo= "(" + term1.codigo + "*" + term2.codigo + ")";
      if ( (term1.type==AxiomConstant.NUMBER || term1.type==AxiomConstant.FUNCTION)  && (term2.type==AxiomConstant.NUMBER || term2.type==AxiomConstant.FUNCTION)) {
          RESULT.type=AxiomConstant.NUMBER;
      }
      else {
          RESULT.type=AxiomConstant.ERROR;
        parser.report_error("Error: Couldn't multiply " + term1.codigo + "and" + term2.codigo,"");
        parser.report_error("  they aren't numerical values","");
        parser.report_error("------------------------------","");
      }
      
              CUP$parser$result = new java_cup.runtime.Symbol(3/*termino*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // termino ::= PARENABIERTO termino RESTA termino PARENCERRADO 
            {
              CAtributo RESULT = null;
		int term1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int term1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		CAtributo term1 = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int term2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int term2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CAtributo term2 = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
      RESULT=new CAtributo();
        RESULT.codigo= "(" + term1.codigo + "-" + term2.codigo + ")";
      if ( (term1.type==AxiomConstant.NUMBER || term1.type==AxiomConstant.FUNCTION)  && (term2.type==AxiomConstant.NUMBER || term2.type==AxiomConstant.FUNCTION)) {
          RESULT.type=AxiomConstant.NUMBER;
      }
      else {
          RESULT.type=AxiomConstant.ERROR;
        parser.report_error("Error: Couldn't subtract " + term1.codigo + "and" + term2.codigo,"");
        parser.report_error("  they aren't numerical values","");
        parser.report_error("------------------------------","");
      }
      
              CUP$parser$result = new java_cup.runtime.Symbol(3/*termino*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // termino ::= PARENABIERTO termino SUMA termino PARENCERRADO 
            {
              CAtributo RESULT = null;
		int term1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int term1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		CAtributo term1 = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int term2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int term2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CAtributo term2 = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
      RESULT=new CAtributo();
        RESULT.codigo= "(" + term1.codigo + "+" + term2.codigo + ")";
      if ( (term1.type==AxiomConstant.NUMBER || term1.type==AxiomConstant.FUNCTION)  && (term2.type==AxiomConstant.NUMBER || term2.type==AxiomConstant.FUNCTION)) {
          RESULT.type=AxiomConstant.NUMBER;
      }
      else {
          RESULT.type=AxiomConstant.ERROR;
        parser.report_error("Error: Couldn't add " + term1.codigo + "and" + term2.codigo,"");
        parser.report_error("  they aren't numerical values","");
        parser.report_error("------------------------------","");
      }
      
              CUP$parser$result = new java_cup.runtime.Symbol(3/*termino*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // termino ::= termino DIVISION termino 
            {
              CAtributo RESULT = null;
		int term1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int term1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CAtributo term1 = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int term2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int term2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CAtributo term2 = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
      RESULT=new CAtributo();
        RESULT.codigo=term1.codigo + "/" + term2.codigo;
      if ( (term1.type==AxiomConstant.NUMBER || term1.type==AxiomConstant.FUNCTION)  && (term2.type==AxiomConstant.NUMBER || term2.type==AxiomConstant.FUNCTION)) {
          RESULT.type=AxiomConstant.NUMBER;
      }
      else{
          RESULT.type=AxiomConstant.ERROR;
        parser.report_error("Error: Couldn't divide " + term1.codigo + "and" + term2.codigo,"");
        parser.report_error("  they aren't numerical values","");
        parser.report_error("------------------------------","");
      }
      
              CUP$parser$result = new java_cup.runtime.Symbol(3/*termino*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // termino ::= termino MULTIPLICACION termino 
            {
              CAtributo RESULT = null;
		int term1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int term1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CAtributo term1 = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int term2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int term2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CAtributo term2 = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
      RESULT=new CAtributo();
        RESULT.codigo=term1.codigo + "*" + term2.codigo;
      if ( (term1.type==AxiomConstant.NUMBER || term1.type==AxiomConstant.FUNCTION)  && (term2.type==AxiomConstant.NUMBER || term2.type==AxiomConstant.FUNCTION)) {
          RESULT.type=AxiomConstant.NUMBER;
      }
      else {
          RESULT.type=AxiomConstant.ERROR;
        parser.report_error("Error: Couldn't multiply " + term1.codigo + "and" + term2.codigo,"");
        parser.report_error("  they aren't numerical values","");
        parser.report_error("------------------------------","");
      }
      
              CUP$parser$result = new java_cup.runtime.Symbol(3/*termino*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // termino ::= termino RESTA termino 
            {
              CAtributo RESULT = null;
		int term1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int term1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CAtributo term1 = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int term2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int term2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CAtributo term2 = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
      RESULT=new CAtributo();
        RESULT.codigo=term1.codigo + "-" + term2.codigo;
      if ( (term1.type==AxiomConstant.NUMBER || term1.type==AxiomConstant.FUNCTION)  && (term2.type==AxiomConstant.NUMBER || term2.type==AxiomConstant.FUNCTION)) {
          RESULT.type=AxiomConstant.NUMBER;
      }
      else {
          RESULT.type=AxiomConstant.ERROR;
        parser.report_error("Error: Couldn't subtract " + term1.codigo + "and" + term2.codigo,"");
        parser.report_error("  they aren't numerical values","");
        parser.report_error("------------------------------","");
      }
      
              CUP$parser$result = new java_cup.runtime.Symbol(3/*termino*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // termino ::= termino SUMA termino 
            {
              CAtributo RESULT = null;
		int term1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int term1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CAtributo term1 = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int term2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int term2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CAtributo term2 = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
      RESULT=new CAtributo();
        RESULT.codigo=term1.codigo + "+" + term2.codigo;
      if ( (term1.type==AxiomConstant.NUMBER || term1.type==AxiomConstant.FUNCTION)  && (term2.type==AxiomConstant.NUMBER || term2.type==AxiomConstant.FUNCTION)) {
          RESULT.type=AxiomConstant.NUMBER;
      }
      else {
          RESULT.type=AxiomConstant.ERROR;
        parser.report_error("Error: Couldn't add " + term1.codigo + "and" + term2.codigo,"");
        parser.report_error("  they aren't numerical values","");
        parser.report_error("------------------------------","");

      }


      
              CUP$parser$result = new java_cup.runtime.Symbol(3/*termino*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // termino ::= IDENTIFICADOR PARENABIERTO lista_terminos PARENCERRADO 
            {
              CAtributo RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Yytoken id = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CAtributo list = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

      RESULT=new CAtributo();

        RESULT.codigo=id.m_text + "(" + list.codigo + ")";
        RESULT.type=AxiomConstant.FUNCTION;


      
              CUP$parser$result = new java_cup.runtime.Symbol(3/*termino*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // termino ::= NUMEROENTERO 
            {
              CAtributo RESULT = null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Yytoken num = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
      RESULT=new CAtributo();
        RESULT.codigo=num.m_text;
        RESULT.type=AxiomConstant.NUMBER;
      
              CUP$parser$result = new java_cup.runtime.Symbol(3/*termino*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // termino ::= NUMEROREAL 
            {
              CAtributo RESULT = null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Yytoken num = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
      RESULT=new CAtributo();
        RESULT.codigo=num.m_text;
        RESULT.type=AxiomConstant.NUMBER;

      
              CUP$parser$result = new java_cup.runtime.Symbol(3/*termino*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // termino ::= IDENTIFICADOR 
            {
              CAtributo RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Yytoken id = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		


      RESULT=new CAtributo();


      Term term=parser.odeService.getTerm(parser.ontologyName,id.m_text);
      if(term!=null) {
        if (term.type!=TermTypes.CONSTANT) {
          //esta en la ontologia pero nos da igual
          //parser.report_error("Error:","");
          //parser.report_error(id.m_text +" is a term of the ontology, please use other name","");
          RESULT.type=AxiomConstant.VARIABLE;

          RESULT.codigo= "$" + id.m_text + "~" ;

        }
        else{
          /*no hacemos nada es una constante*/

          RESULT.codigo= id.m_text ;
          int type=parser.odeService.getConstant(parser.ontologyName,id.m_text).valueType;
          if (type==ValueTypes.CARDINAL || type==ValueTypes.FLOAT || type==ValueTypes.INTEGER || type==ValueTypes.RANGE){
            RESULT.type=AxiomConstant.NUMBER;
          }
        }

      }
      else {
        /*marcamos que es una variable*/
          RESULT.type=AxiomConstant.VARIABLE;

          RESULT.codigo= "$" + id.m_text + "~" ;
      }



      
              CUP$parser$result = new java_cup.runtime.Symbol(3/*termino*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= fbf 
            {
              CAtributo RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CAtributo f1 = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		


    RESULT=new CAtributo();

      RESULT.arbol=f1.arbol;

    try{

      parser.finalizado(f1.arbol);

    }
    catch (AxiomException e){
      throw e;
    }


    
              CUP$parser$result = new java_cup.runtime.Symbol(1/*inicio*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CAtributo start_val = (CAtributo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

